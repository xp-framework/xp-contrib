/**
 * This file is part of the XP-Framework
 *
 * Aftermath
 * Copyright (c) 2011, XP-Framework Team
 */
package net.xp_forge.aftermath;

import io.File;
import io.Folder;
import io.IOException;
import util.Properties;
import lang.ClassLoader;
import util.cmd.Console;
import lang.reflect.Package;
import io.streams.OutputStream;
import io.streams.StringWriter;
import io.streams.FileOutputStream;
import io.streams.OutputStreamWriter;

import lang.Throwable;
import io.FileNotFoundException;
import lang.ElementNotFoundException;

import net.xp_forge.aftermath.God;
import net.xp_forge.aftermath.Soul;
import net.xp_forge.aftermath.Dogma;
import net.xp_forge.aftermath.soul.SoulFactory;
import net.xp_forge.aftermath.soul.SoulNotFoundException;
import net.xp_forge.aftermath.realm.RealmFactory;
import net.xp_forge.aftermath.realm.RealmNotFoundException;
import net.xp_forge.aftermath.beholder.QuietBeholder;
import net.xp_forge.aftermath.beholder.VerboseBeholder;
import net.xp_forge.aftermath.beholder.DefaultBeholder;

import net.xp_forge.aftermath.wormhole.Sonar;

import native standard.trim;
import native standard.substr;
import native standard.getcwd;
import native standard.basename;
import native pcre.preg_replace;
import native standard.str_repeat;
import native standard.strip_tags;

/**
 * Aftermath - Playing God with your code
 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 *
 * Usage:
 * <pre>
 *   aftermath [options] [target]
 *   aftermath -dump {Soul.class.php}
 *   aftermath -sr {truth.package.name} {output}
 *   aftermath -sp {Dogma} {output}
 * </pre>
 *
 * Options is one of:
 * <ul>
 *   <li>-v : Be verbose (show list of found Sins)</li>
 *   <li>-q : Be quiet (no output)</li>
 *   <li>-d : Either a Dogma included in this package (see below)
 *        or /path/to/a/dogma.xml</li>
 *   <li>-b {beholder.class.Name} {output}
 *   <li>-dump : Show a dump of all Soul's Deeds (for debug purposes)</li>
 *   <li>-sr : Generate "rules.xml" for sonar-aftermath-plugin</li>
 *   <li>-sp : Export Dogma to sonar-aftermath-plugin profile</li>
 * </ul>
 *
 * Output is either:
 * <ul>
 *   <li>"-" for console output</li>
 *   <li>a file name</li>
 * </ul>
 *
 * Target can be one or more of:
 * <ul>
 *   <li>A Realm : E.g: /home/user/projects/my_project</li>
 *   <li>A Soul  : E.g: /home/user/projects/my_project/src/Soul.class.php</li>
 *   <li>If target is missing, the current directory is used as Realm</li>
 * </ul>
 *
 */
public class Aftermath {
  protected FileOutputStream $out;
  protected FileOutputStream $err;
  protected Soul[] $souls;
  protected Realm[] $realms;

  /**
   * Constructor
   *
   */
  public __construct() {
    $this.out= Console::$out;
    $this.err= Console::$err;
  }

  /**
   * Reassigns standard output stream
   *
   * @param  io.streams.OutputStream $out
   * @return void
   */
  public OutputStream setOut(OutputStream $out) {
    $this.out= new StringWriter($out);
  }

  /**
   * Reassigns standard error stream
   *
   * @param  io.streams.OutputStream $error
   * @return void
   */
  public OutputStream setErr(OutputStream $err) {
    $this.err= new StringWriter($err);
  }

  /**
   * Return project version by reading META-INF/manifest.ini::version
   *
   * @return string
   */
  public string getVersion() {
    try {
      $prop= Properties::fromString(ClassLoader::getDefault().getResource('META-INF/manifest.ini'));
      return $prop.readString('application', 'version', 'Unknown');

    } catch (Throwable $ex) {
      return 'Unknown';
    }
  }

  /**
   * Converts api-doc "markup" to plain text w/ ASCII "art"
   *
   * @param  string $markup
   * @return string text
   */
  protected string textOf(string $markup) {
    $line= str_repeat('=', 72);
    return strip_tags(preg_replace(
      ['#<pre>#', '#</pre>#', '#<li>#'],
      [$line, $line, '* '],
      trim($markup)
    ));
  }

  /**
   * Displays usage
   *
   * @return int exitcode
   */
  protected int usage() {
    $this.err.write("\n", $this.textOf($this.getClass().getComment()), "\n");

    // List included Dogmas in this package
    $this.err.write("\n", 'Dogma list included in this package:', "\n\n");
    foreach ($resource, $dogma in Dogma::getIncludedInPackage()) {
      $this.err.write(' * ', $resource, ': ', $dogma.getName() , "\n");
    }

    // List included Beholders in this package
    $this.err.write("\n\n", 'Beholder list included in this package:', "\n\n");
    foreach ($beholderClassName in Beholder::getIncludedInPackage()) {
      $this.err.write(' * ', $beholderClassName , "\n");
    }

    $this.err.write("\n");
    return 1;
  }

  /**
   * Gets an argument
   *
   * @param  string[] $args
   * @param  int $offset
   * @param  string $option
   * @param  bool $required
   * @return string
   * @throws lang.IllegalArgumentException if no argument exists by this offset
   */
  protected string arg(string[] $args, int $offset, string $option, bool $required= true) {
    if (isset($args[$offset])) {
      return $args[$offset];
    }

    if ($required) {
      throw new IllegalArgumentException('Option -' ~ $option ~ ' requires an argument');
    }

    return null;
  }

  /**
   * Returns an output stream writer for a given file name
   *
   * @param  string $in
   * @return io.streams.OutputStreamWriter
   * @throws io.IOException when the output folder could not be created
   */
  protected OutputStreamWriter streamWriter(string $in) throws IOException {
    if ('-' === $in) return Console::$out;

    $file= new File($in);

    // Create folder if not exists
    $folder= new Folder($file.getPath());
    if (!$folder.exists()) {
      $folder.create();
    }

    return new StringWriter($file.getOutputStream());
  }

  /**
   * Dump all Deeds of the specified Soul
   *
   * @param  net.xp_forge.aftermath.Soul $soul
   * @param  bool $verbose If true, also dump Deed's purpose
   * @return void
   */
  protected void dumpDeeds(Soul $soul) {

    // Get this Soul's Creed based on its stigma
    $creed= Creed::forStigma($soul.getStigma());

    // A Soul without a Creed cannot be weighed
    if (null === $creed) {
      $this.err.write('*** ERROR: No Creed registered for [' ~ $soul.getName() ~ "]\n");
      return;
    }

    // Interrogate this Soul and get a reference to the first Deed
    $deed= $creed.getConfessor().interrogate($soul);

    // Dump Deeds
    $this.out.write($this.textOf("<pre>\n" ~ $soul.getName() ~ "\n</pre>") ~ "\n");
    do {
      $this.out.write(' ' ~ $deed.toString() ~ "\n");
    } while (null !== ($deed= $deed.next));
  }

  /**
   * Runs tool
   *
   * @param  string[] $args
   * @return int exitcode
   */
  public int run(string[] $args) {

    // Init targets
    $targets= [];

    // Summon God
    $god= new God();

    // Init beholder
    $beholder= new DefaultBeholder($this.out);

    // Init subjects
    $realm= $soul= $dogma= null;

    // Parse arguments
    $arguments= [];
    try {
      for ($ai= 0, $an= $args.length; $ai < $an; $ai++) {
        $arg= $args[$ai];

        // Enable verbosity: show Sins list after the weighing is complete
        if ('-v' === $arg) {
          $beholder= new VerboseBeholder($this.out);
          continue;
        }

        // Shhh!
        if ('-q' === $arg) {
          $beholder= new QuietBeholder($this.out);
          continue;
        }

        // Show usage
        if ('-?' === $arg || '-h' === $arg || '--h' === $arg || '--help' === $arg) {
          return $this.usage();
        }

        // Set Dogma
        if ('-d' === $arg || '--dogma' === $arg) {
          $dogmaFile= $this.arg($args, ++$ai, 'd');

          // Check for file existance
          try {
            $dogma= Dogma::fromFile(new File($dogmaFile));

          // Check for resource
          } catch(FileNotFoundException $ex) {
            try {
              $dogma= Dogma::fromResource($dogmaFile);

            } catch(Throwable $ex) {
              throw new IllegalArgumentException('Option -d has an invalid value [' ~ $dogmaFile ~ ']');
            }
          }

          continue;
        }

        // Add Beholder
        if ('-b' === $arg || '--beholder' === $arg) {
          $beholderName  = $this.arg($args, ++$ai, 'b');
          $beholderClass = XPClass::forName($beholderName);

          // Setup output
          try {
            $outputName   = $this.arg($args, ++$ai, 'b');
            $outputStream = $this.streamWriter($outputName);
          } catch (IOException $ex) {
            throw new IllegalArgumentException('Option -b has an invalid value [' ~ $outputName ~ ']');
          }

          // Create Beholder instance and set it as observer
          $god.addObserver($beholderClass.newInstance($outputStream));
          continue;
        }

        // Debug Deeds dump
        if ('-dump' === $arg || '--dump' === $arg) {
          try {
            $soul= SoulFactory::produce($this.arg($args, ++$ai, 'dump'));
          } catch (SoulNotFoundException $ex) {
            throw new IllegalArgumentException('Option -dump has an invalid value [' ~ $arg ~ ']');
          }

          // Show a dump with all Deeds and exit
          $this.dumpDeeds($soul);
          return 5;
        }

        // Sonar rules export
        if ('-sr' === $arg || '--sonarrules' === $arg) {
          $truthPackageName= $this.arg($args, ++$ai, 'sr');

          try {
            $truthPackage= Package::forName($truthPackageName);
          } catch (ElementNotFoundException $ex) {
            throw new IllegalArgumentException('Option -sr has an invalid value [' ~ $truthPackageName ~ ']', $ex);
          }

          // Setup output
          try {
            $outputName   = $this.arg($args, ++$ai, 'sr');
            $outputStream = $this.streamWriter($outputName);
          } catch (IOException $ex) {
            throw new IllegalArgumentException('Option -sr has an invalid value [' ~ $outputName ~ ']', $ex);
          }

          // Export Truths in the provided package into a format that can
          // be consumed by the sonar-aftermath-plugin
          Sonar::exportRules($truthPackage, $outputStream);
          return 0;
        }

        // Sonar profile export
        if ('-sp' === $arg || '--sonarprofile' === $arg) {
          $dogmaFile= $this.arg($args, ++$ai, 'sp');

          // Check for file existance
          try {
            $dogma= Dogma::fromFile(new File($dogmaFile));

          // Check for resource
          } catch(FileNotFoundException $ex) {
            try {
              $dogma= Dogma::fromResource($dogmaFile);

            } catch(Throwable $ex) {
              throw new IllegalArgumentException('Option -sp has an invalid value [' ~ $dogmaFile ~ ']');
            }
          }

          // Setup output
          try {
            $outputName   = $this.arg($args, ++$ai, 'sp');
            $outputStream = $this.streamWriter($outputName);
          } catch (IOException $ex) {
            throw new IllegalArgumentException('Option -sp has an invalid value [' ~ $outputName ~ ']', $ex);
          }

          // Export Dogma to sonat-aftermath-plugin profile XML file
          Sonar::exportProfile($dogma, $outputStream);
          return 0;
        }

        // Add target
        try {
          $this.realms[]= RealmFactory::produce($arg);

        // This is not a Realm; Try to see if it is a Soul
        } catch (RealmNotFoundException $ex) {
          try {
            $this.souls[]= SoulFactory::produce($arg);

          // Not a Realm, nor a Soul
          } catch (SoulNotFoundException $ex) {
            throw new IllegalArgumentException('Don\'t know how to weigh [' ~ $arg ~ ']');
          }
        }
      }
    } catch (Throwable $ex) {
      $this.err.write('*** ERROR: ', $ex.getMessage(), "\n");
      xp::gc();
      return 1;
    }

    // Add selected beholder
    $god.addObserver($beholder);

    // Check Dogma; if not set, default to "all-aftermath-rules"
    if (null === $dogma) {
      $dogma= Dogma::fromResource('all-truths.xml');
    }

    // Notify beholders that God's work is about to begin
    $god.setChanged();
    $god.notifyObservers($this);

    // Nothing to weigh: use current directory
    if ($this.realms.length == 0 && $this.souls.length == 0) {
      $this.realms[]= RealmFactory::produce(getcwd());
    }

    // Weigh all specified Realms
    for ($ri= 0, $rn= $this.realms.length; $ri < $rn; $ri++) {
      $god.weighRealm($this.realms[$ri], $dogma);
    }

    // Weigh all specified Souls
    for ($si= 0, $sn= $this.souls.length; $si < $sn; $si++) {
      $god.weighSoul($this.souls[$si], $dogma);
    }

    // Notify beholders that God's work is now complete
    $god.setChanged();
    $god.notifyObservers($god);

    // Exitcode 0 (success)
    return 0;
  }

  /**
   * Main runner method
   *
   * @param  string[] $args
   * @return int exitcode
   */
  public static int main(string[] $args) {
    return new self().run($args);
  }
}
