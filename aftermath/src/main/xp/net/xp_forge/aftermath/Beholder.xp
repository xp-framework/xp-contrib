/**
 * This file is part of the XP-Framework
 *
 * Aftermath
 * Copyright (c) 2011, XP-Framework Team
 */
package net.xp_forge.aftermath;

import util.Observer;
import util.Observable;
import lang.reflect.Method;
import lang.reflect.Package;
import util.collections.HashTable;
import io.streams.OutputStreamWriter;

import lang.IllegalArgumentException;

import native standard.count;

/**
 * Event listener
 *
 * @aka EventListener
 */
public class Beholder implements Observer {
  protected HashTable<XPClass, Method> $methods;
  protected OutputStreamWriter         $out;

  /**
   * Constructor
   *
   * @param  io.streams.OutputStreamWriter $out
   */
  public __construct(OutputStreamWriter $out) {
    $this.out= $out;
  }

  /**
   * update() overloading
   *
   * @observer(for= 'null')
   * @observer(for= 'net.xp_forge.aftermath.Soul')
   * @observer(for= 'net.xp_forge.aftermath.Sin')
   *
   * @param  util.Observable $god
   * @param  var $arg default null
   * @return void
   */
  public void update(var $god, var $arg= null) {
    if (null === $arg) return;

    // Lazy-init methods; look for methods with the @observer annotations
    if (null === $this.methods) {
      $this.methods= new HashTable<XPClass, Method>();
      $methods= $this.getClass().getMethods();
      for ($mi= 0, $mn= $methods.length; $mi < $mn; $mi++) {
        $method= $methods[$mi];
        if (!$method.hasAnnotation('observer', 'type')) continue;
        $this.methods.put(XPClass::forName($method.getAnnotation('observer', 'type')), $method);
      }
    }

    // Call @observer; if any
    $argClass= $arg.getClass();
    $observerClasses= $this.methods.keys();
    for ($oi= 0, $on= $observerClasses.length; $oi < $on; $oi++) {
      $observerClass= $observerClasses[$oi];
      if ($observerClass.isInstance($arg) || $argClass.isSubclassOf($observerClass)) {
        return $this.methods.get($observerClass).invoke($this, [$god, $arg]);
      }
    }

    // throw new IllegalArgumentException('Cannot find @observer for [' ~ $argClass.getName() ~ ']');
  }

  /**
   * Get list of all included Beholders in this package
   *
   * Note ignore: DefaultBeholder, QuietBeholder and VerboseBeholder
   *
   * @return string[]
   */
  public static string[] getIncludedInPackage() {
    $retVal= [];

    // Just a little bit of reflection: get a list of all Beholders
    $classNames= Package::forName('net.xp_forge.aftermath.beholder').getClassNames();
    for ($ci= 0, $cn= count($classNames); $ci < $cn; $ci++) {
      $className= $classNames[$ci];
      if (
        'net.xp_forge.aftermath.beholder.DefaultBeholder' === $className ||
        'net.xp_forge.aftermath.beholder.QuietBeholder'   === $className ||
        'net.xp_forge.aftermath.beholder.VerboseBeholder' === $className
      ) {
        continue;
      }
      $retVal[]= $className;
    }

    return $retVal;
  }
}
