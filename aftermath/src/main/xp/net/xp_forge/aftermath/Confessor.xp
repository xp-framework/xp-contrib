/**
 * This file is part of the XP-Framework
 *
 * Aftermath
 * Copyright (c) 2011, XP-Framework Team
 */
package net.xp_forge.aftermath;

import net.xp_forge.aftermath.Soul;
import net.xp_forge.aftermath.Deed;
import net.xp_forge.aftermath.Creed;
import net.xp_forge.aftermath.Mutation;

/**
 * Higly trained in the fine art of torture, this fierce beings relentlessly interrogate
 * Souls to gather all commited Deeds
 *
 * @aka Tokenizer
 */
abstract class Confessor {
  protected Mutation[] $mutations;
  protected Creed $creed;

  /**
   * Get list of Mutations that this Confessor can use
   *
   */
  public Mutation[] getMutations() {
    $thisClass= $this.getClass();

    // Cache miss
    if (null === $this.mutations) {
      $this.mutations= [];
      if ($thisClass.hasAnnotation('mutation', 'classes')) {
        foreach ($mutationFqcn in $thisClass.getAnnotation('mutation', 'classes')) {
          $this.mutations[]= XPClass::forName($mutationFqcn).newInstance();
        }
      }
    }
    return $this.mutations;
  }

  /**
   * Get the Creed that this Confessor is specialized in
   *
   * @return net.xp_forge.aftermath.Creed
   */
  public Creed getCreed() {

    // Cache miss
    if (null === $this.creed) {
      $creedFqcn= $this.getClass().getAnnotation('creed', 'class');
      $this.creed= XPClass::forName($creedFqcn).newInstance();
    }
    return $this.creed;
  }

  /**
   * Interrogate the provided Soul to get all commited Deeds
   *
   * Return a reference to the first Deed
   *
   * @aka    getTokens()
   * @return net.xp_forge.aftermath.Deed
   */
  abstract public Deed interrogate(Soul $soul);

  /**
   * Helper function to apply registered Mutations to the Deeds chain
   *
   * Returns a reference to the mutated Deeds chain
   *
   * @param  net.xp_forge.aftermath.Deed $firstDeed
   * @return net.xp_forge.aftermath.Deed
   */
  protected Deed applyMutations(Deed $firstDeed) {
    $mutations= $this.getMutations();

    // Early return; no Mutations registered
    $mn= $mutations.length;
    if (0 === $mn) return $firstDeed;

    // Apply mutations to Deeds chain
    $deed= $firstDeed;
    do {
      for ($mi= 0; $mi < $mn; $mi++) {
        $mutations[$mi].apply($deed);
      }
    } while (null !== ($deed= $deed.next));

    // Return reference to the first Deed in chain
    return $firstDeed;
  }
}
