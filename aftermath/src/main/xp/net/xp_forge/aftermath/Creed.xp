/**
 * This file is part of the XP-Framework
 *
 * Aftermath
 * Copyright (c) 2011, XP-Framework Team
 */
package net.xp_forge.aftermath;

import lang.reflect.Package;
import lang.IllegalArgumentException;
import lang.ElementNotFoundException;

import net.xp_forge.aftermath.Creed;
import net.xp_forge.aftermath.Confessor;

/**
 * Represents a Creed that Soul might choose to follow. A Creed is basically
 * a set of Rules and a Confessor to interrogate a Soul for Deeds
 *
 * @aka Language
 */
public abstract class Creed {
  protected static Creed[] $allCreeds= null;

  /**
   * Returns this Creed's stigma
   *
   * @return string
   * @throws lang.ElementNotFoundException in case of missing @name annotation
   */
  public string getStigma() throws ElementNotFoundException {
    try {
      return $this.getClass().getAnnotation('stigma');

    } catch (ElementNotFoundException $ex) {
      throw new ElementNotFoundException('Missing @stigma annotation in [' ~ $this.getClassName() ~ ']', $ex);
    }
  }

  /**
   * Get this Creed's official name
   *
   * @return string
   */
  public abstract string getName();

  /**
   * Get the Confessor used to interrogate all Souls that follows this Creed
   *
   * @aka    getTokenizer()
   * @return net.xp_forge.aftermath.Confessor
   */
  public abstract Confessor getConfessor();

  /**
   * Get a Creed based on a Soul's Stigma
   *
   * @param  string $stigma
   * @return net.xp_forge.aftermath.Creed
   * @throws lang.IllegalArgumentException when an invalid stigma is provided
   * @throws lang.ElementNotFoundException when no Creed is registered for the specified stigma
   */
  public static Creed forStigma(string $stigma) throws IllegalArgumentException, ElementNotFoundException {

    // Short-circuit
    if (null === $stigma) {
      throw new IllegalArgumentException('Stigma cannot be empty');
    }

    // Search by stigma
    $allCreeds= self::getAllCreeds();
    for ($ci= 0, $cn= self::$allCreeds.length; $ci < $cn; $ci++) {
      $creed= self::$allCreeds[$ci];
      if ($stigma === $creed.getStigma()) return $creed;
    }

    // Not found
    throw new ElementNotFoundException('Cannot find a Creed for stigma [' ~ $stigma ~ ']');
  }

  /**
   * Get a Creed based on it's name
   *
   * @param  string $name
   * @return net.xp_forge.aftermath.Creed
   * @throws lang.IllegalArgumentException when an invalid name is provided
   * @throws lang.ElementNotFoundException when no Creed is registered with the specified name
   */
  public static Creed forName(string $name) throws IllegalArgumentException, ElementNotFoundException {

    // Short-circuit
    if (null === $name) {
      throw new IllegalArgumentException('Name cannot be empty');
    }

    // Search by name
    $allCreeds= self::getAllCreeds();
    for ($ci= 0, $cn= self::$allCreeds.length; $ci < $cn; $ci++) {
      $creed= $allCreeds[$ci];
      if ($name === $creed.getName()) return $creed;
    }

    // Not found
    throw new ElementNotFoundException('Cannot find Creed with name [' ~ $name ~ ']');
  }

  /**
   * Return a list of all registered Creeds
   *
   * @return Creed[]
   */
  protected static Creed[] getAllCreeds() {

    // Cache miss
    if (null === self::$allCreeds) {
      self::$allCreeds= [];
      $creedClasses= Package::forName('net.xp_forge.aftermath.creed').getClasses();
      for ($ci= 0, $cn= $creedClasses.length; $ci < $cn; $ci++) {
        self::$allCreeds[]= $creedClasses[$ci].newInstance();
      }
    }

    return self::$allCreeds;
  }
}
