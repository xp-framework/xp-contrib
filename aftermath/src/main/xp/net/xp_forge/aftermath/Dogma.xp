/**
 * This file is part of the XP-Framework
 *
 * Aftermath
 * Copyright (c) 2011, XP-Framework Team
 */
package net.xp_forge.aftermath;

import io.File;
import xml.Node;
import xml.Tree;
import util.Hashmap;
import lang.reflect.Package;

import io.FileNotFoundException;
import lang.IllegalArgumentException;
import lang.ElementNotFoundException;

import net.xp_forge.aftermath.Dogma;
import net.xp_forge.aftermath.Truth;
import net.xp_forge.aftermath.Creed;

import native standard.count;

/**
 * Represents a set of Truths (from one or many Creeds) that all Souls
 * are judged against
 *
 * @aka CodingStandard
 */
public class Dogma {
  protected string  $name;
  protected Truth[] $truths= [];

  /**
   * Factory from XML node. Example XML:
   *
   * <dogma name="Default dogma">
 *     <truth ... />
 *     ...
   * </dogma>
   *
   * @param  xml.Node $xmlNode
   * @return net.xp_forge.aftermath.Dogma
   * @throws lang.IllegalArgumentException in case the provided XML node is invalid
   * @see    xp://net.xp_forge.aftermath.Truth::fromXmlNode()
   */
  public static self fromXmlNode(Node $xmlNode) throws IllegalArgumentException {
    $retVal= new self();

    // Check node name <dogma>
    if ('dogma' !== $xmlNode.getName()) {
      throw new IllegalArgumentException('Invalid node name: expecting [dogma] but received [' ~ $xmlNode.getName() ~ ']');
    }

    // Get @name
    if (!$xmlNode.hasAttribute('name')) {
      throw new IllegalArgumentException('Missing [name] attribute in <dogma> XML');
    }
    $retVal.setName($xmlNode.getAttribute('name'));

    // Get children
    $truthNodes= $xmlNode.children;
    for ($ti= 0, $tn= count($truthNodes); $ti < $tn; $ti++) {
      $truthNode= $truthNodes[$ti];

      // Check node name is <truth>
      if ('truth' !== $truthNode.getName()) {
        continue;
      }

      // Build Truth from node and add to list
      $retVal.addTruth(Truth::fromXmlNode($truthNode));
    }

    return $retVal;
  }

  /**
   * Factory from resources included in this package
   *
   * Dogma XML files are stored in /src/main/resources/net/xp_forge/aftermath/dogma/
   *
   * @param  string $resourceName E.g.: "default.xml" or "net/xp_forge/aftermath/dogma/default.xml"
   * @return net.xp_forge.aftermath.Dogma
   * @throws lang.ElementNotFoundException when the specified resource cannot be found
   * @throws lang.IllegalArgumentException in case the provided XML is invalid
   */
  public static self fromResource(string $resourceName) throws ElementNotFoundException, IllegalArgumentException {
    $xmlString = Package::forName('net.xp_forge.aftermath.dogma').getResource($resourceName);
    $xmlTree   = Tree::fromString($xmlString);
    return self::fromXmlNode($xmlTree.root);
  }

  /**
   * Factory from io.File
   *
   * @param  io.File $file
   * @return net.xp_forge.aftermath.Dogma
   * @throws io.FileNotFoundException when the specified file cannot be found
   * @throws lang.IllegalArgumentException in case the provided XML is invalid
   */
  public static self fromFile(File $file) throws FileNotFoundException, IllegalArgumentException {
    $xmlTree= Tree::fromFile($file);
    return self::fromXmlNode($xmlTree.root);
  }

  /**
   * Get list of all included Dogmas in this package
   *
   * @return [:net.xp_forge.aftermath.Dogma]
   */
  public static [:self] getIncludedInPackage() {
    $retVal= [];

    // Just a little bit of reflection: get a list of all Dogmas
    $resources= Package::forName('net.xp_forge.aftermath.dogma').getResources();
    for ($ri= 0, $rn= count($resources); $ri < $rn; $ri++) {
      $resource= $resources[$ri];
      $retVal[$resource]= self::fromResource($resource);
    }

    return $retVal;
  }

  /**
   * Gets the name of this Dogma
   *
   * @return string
   */
  public string getName() {
    return $this.name;
  }

  /**
   * Sets the name of this Dogma
   *
   * @param  string $name
   * @return void
   */
  public void setName(string $name) {
    $this.name= $name;
  }

  /**
   * Adds a new Truth to this Dogma
   *
   * @aka    addRule()
   * @param  net.xp_forge.aftermath.Truth $truth
   * @return void
   */
  public void addTruth(Truth $truth) {
    $this.truths[]= $truth;
  }

  /**
   * Returns the complete set of Truths this Dogma enforces
   *
   * @aka    getRules()
   * @return net.xp_forge.aftermath.Truth[]
   */
  public Truth[] getTruths() {
    return $this.truths;
  }

  /**
   * Returns all Truths that this Dogma enforces for a specific Creed
   *
   * @param  net.xp_forge.aftermath.Creed $creed
   * @aka    getRulesForLanguage()
   * @return net.xp_forge.aftermath.Truth[]
   */
  public Truth[] getTruthsForCreed(Creed $creed) {

    // Init Truth list
    $retVal= [];

    // Filter out Truths that are not part of the specified Creed
    $truths= $this.getTruths();
    for ($ti= 0, $tn= count($truths); $ti < $tn; $ti++) {
      $truth= $truths[$ti];
      if ($truth.getCreed().getName() === $creed.getName()) {
        $retVal[]= $truth;
      }
    }

    // Return list of Truths specific to the soecified Creed
    return $retVal;
  }
}
