/**
 * This file is part of the XP-Framework
 *
 * Aftermath
 * Copyright (c) 2011, XP-Framework Team
 */
package net.xp_forge.aftermath.beholder;

import lang.Runtime;
import util.Observable;
import util.profiling.Timer;
import io.streams.OutputStreamWriter;

import net.xp_forge.aftermath.God;
import net.xp_forge.aftermath.Sin;
import net.xp_forge.aftermath.Soul;
import net.xp_forge.aftermath.Realm;
import net.xp_forge.aftermath.Beholder;
import net.xp_forge.aftermath.Aftermath;
import net.xp_forge.aftermath.BeholderNote;

import native standard.str_repeat;

/**
 * Beholder that watches the weighing progress
 *
 * Output is similar to that of the DefaultBeholder
 * At the end of the output, it will display a list with all Sins
 *
 */
public class VerboseBeholder extends Beholder {
  protected OutputStreamWriter $out;
  protected Timer              $timer;
  protected int                $column    = 0;
  protected bool               $hasNoSins = true;
  protected int                $soulCount = 0;
  protected int                $pureCount = 0;
  protected int                $sinsCount = 0;
  protected BeholderNote[]     $notes     = [];

  /**
   * Constructor
   *
   * @param  io.streams.OutputStreamWriter $out
   */
  public __construct(OutputStreamWriter $out) {
    $this.out= $out;
  }

  /**
   * Output method; takes care of wrapping output if output line
   * exceeds maximum length
   *
   * @param  string $string
   * @return void
   */
  protected void write(string $string) {
    if ($this.column > 72) {
      $this.out.writeLine();
      $this.column= 0;
    }

    $this.column++;
    $this.out.write($string);
  }

  /**
   * God has entered the building
   *
   * @param  util.Observable $obs
   * @param  net.xp_forge.aftermath.Aftermath $aftermath
   * @return void
   */
  [@observer(type= 'net.xp_forge.aftermath.Aftermath')]
  public void updateAftermath(Observable $obs, Aftermath $aftermath) {

    // Write configuration
    $this.writeConfiguration($aftermath);

    // Write starting '['
    $this.write("\n[");

    // Start the timer
    $this.timer= new Timer();
    $this.timer.start();
  }

  /**
   * God has started to weigh a Soul
   *
   * @param  util.Observable $obs
   * @param  net.xp_forge.aftermath.Soul $soul
   * @return void
   */
  [@observer(type= 'net.xp_forge.aftermath.Soul')]
  public void updateSoul(Observable $obs, Soul $soul) {

    // Write Soul status
    if (0 !== $this.soulCount) {
      if ($this.hasNoSins) {
        $this.pureCount++;
        $this.write('.');
      } else {
        $this.write('*');
      }
    }

    // Reset Sins flag
    $this.hasNoSins= true;
    $this.soulCount++;
  }

  /**
   * God has found a Sin
   *
   * @param  util.Observable $obs
   * @param  net.xp_forge.aftermath.Sin $sin
   * @return void
   */
  [@observer(type= 'net.xp_forge.aftermath.Sin')]
  public void updateSin(Observable $obs, Sin $sin) {
    $this.notes[]= BeholderNote::fromSin($sin);
    $this.hasNoSins= false;
    $this.sinsCount++;
  }

  /**
   * God's work is complete now
   *
   * @param  util.Observable $obs
   * @param  net.xp_forge.aftermath.God $god
   * @return void
   */
  [@observer(type= 'net.xp_forge.aftermath.God')]
  public void updateGod(Observable $obs, God $god) {

    // All Souls have been weighed
    $this.timer.stop();

    // No Souls weighed
    if ($this.soulCount == 0) {
      $this.write("*** WARNING: Target is empty. God is bored.\n");
      return;
    }

    // Leftover: write last Soul's status
    if ($this.hasNoSins) {
      $this.pureCount++;
      $this.write('.');
    } else {
      $this.write('*');
    }

    // Write trailing ']'
    $this.write("]\n");

    // Write final output
    $this.writeStatistics();
    $this.writeSins();
  }

  /**
   * Write startup configuration
   *
   * @param  net.xp_forge.aftermath.Aftermath
   * @return void
   */
  protected void writeConfiguration(Aftermath $aftermath) {
    $this.out.writeLinef(
      'Aftermath %s',
      $aftermath.getVersion()
    );
  }

  /**
   * Write final statistics
   *
   * @return void
   */
  protected void writeStatistics() {
    $this.out.writeLinef(
      "\n%s: %d Souls [%d for Heaven, %d for Hell], %d Sins",
      $this.soulCount != $this.pureCount ? 'FAIL' : 'OK',
      $this.soulCount,
      $this.pureCount,
      $this.soulCount - $this.pureCount,
      $this.sinsCount
    );
    $this.out.writeLinef(
      'Memory used: %.2f kB (%.2f kB peak)',
      Runtime::getInstance().memoryUsage() / 1024,
      Runtime::getInstance().peakMemoryUsage() / 1024
    );
    $this.out.writeLinef(
      'Time taken: %.3f seconds',
      $this.timer.elapsedTime()
    );
  }

  /**
   * Write list of collected Sins
   *
   * @return void
   */
  protected void writeSins() {
    $this.out.writeLinef("\n" ~ str_repeat('=', 72));

    // No Sins found
    if (0 === $this.sinsCount) {
      $this.out.writeLine("\n*** No Sins found");
      return;
    }

    // List all Notes
    $lastSoulName= null;
    for ($ni= 0, $nn= $this.notes.length; $ni < $nn; $ni++) {
      $note= $this.notes[$ni];

      // Write Soul name
      if ($lastSoulName != $note.soulName) {
        $this.out.writeLinef("\n%s\n%s", $note.soulName, str_repeat('-', 72));
        $lastSoulName= $note.soulName;
      }

      // Write Sin
      $this.out.writeLinef(
        '[%3d:%3d][%8s] %s',
        $note.year,
        $note.day,
        $note.severity.name(),
        $note.message
      );
    }

    // Add an empty line
    $this.out.writeLine('');
  }
}
