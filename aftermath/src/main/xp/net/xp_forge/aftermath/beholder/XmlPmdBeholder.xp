/**
 * This file is part of the XP-Framework
 *
 * Aftermath
 * Copyright (c) 2011, XP-Framework Team
 */
package net.xp_forge.aftermath.beholder;

import xml.Node;
import xml.Tree;
import util.Date;
import util.Observable;

import net.xp_forge.aftermath.God;
import net.xp_forge.aftermath.Sin;
import net.xp_forge.aftermath.Beholder;
import net.xp_forge.aftermath.BeholderNote;

import native standard.explode;
import native standard.implode;
import native standard.array_pop;

/**
 * Beholder that outputs a PMD compatible XML:
 *
 * <?xml version="1.0" encoding="UTF-8"?>
 * <pmd version="1.1.0" timestamp="2011-11-08T17:34:21+01:00">
 *   <file name="/path/to/File.class.php">
 *     <violation
 *       beginline="6"
 *       endline="6"
 *       rule="ForbidTrailingWhitespaceTruth"
 *       ruleset="net.xp_forge.aftermath.truth.php.whitespace"
 *       package="+global"
 *       class="ZeusClient"
 *       priority="3"
 *     >
 *      Line has trailing whitespace
 *     </violation>
 *     ...
 *   </file>
 *   ...
 * </pmd>
 *
 * Rule priority for PMD (http://pmd.sourceforge.net/rule-guidelines.html):
 *   1. Change absolutely required. Behavior is critically broken/buggy.
 *   2. Change highly recommended. Behavior is quite likely to be broken/buggy.
 *   3. Change recommended. Behavior is confusing, perhaps buggy, and/or against standards/best practices.
 *   4. Change optional. Behavior is not likely to be buggy, but more just flies in the face of standards/style/good taste.
 *   5. Change highly optional. Nice to have, such as a consistent naming policy for package/class/fields...
 *
 */
public class XmlPmdBeholder extends Beholder {
  protected static [:int] $priorityMapping= [
    info     : 5,
    minor    : 4,
    major    : 3,
    critical : 2,
    blocker  : 1
  ];

  protected BeholderNote[] $notes= [];

  /**
   * God has found a Sin
   *
   * @param  util.Observable $obs
   * @param  net.xp_forge.aftermath.Sin $sin
   * @return void
   */
  [@observer(type= 'net.xp_forge.aftermath.Sin')]
  public void updateSin(Observable $obs, Sin $sin) {
    $this.notes[]= BeholderNote::fromSin($sin);
  }

  /**
   * God's work is complete now. Write XML output
   *
   * @param  util.Observable $obs
   * @param  net.xp_forge.aftermath.God $god
   * @return void
   */
  [@observer(type= 'net.xp_forge.aftermath.God')]
  public void updateGod(Observable $obs, God $god) {
    $root= new Node('pmd', null, [
      version  : '1.1.0',
      timstamp : Date::now().toString()
    ]);

    // Add all Sins
    $currentSoulName= null;
    $currentSoulNode= null;
    for ($ni= 0, $nn= $this.notes.length; $ni < $nn; $ni++) {
      $note= $this.notes[$ni];

      // New Soul
      if ($currentSoulName !== $note.soulName) {
        $currentSoulName= $note.soulName;
        $currentSoulNode= $root.addChild(new Node('file', null, [name: $currentSoulName]));
      }

      $tmp= explode('.', $note.truthFqcn);
      $truthName = array_pop($tmp);
      $truthSet  = implode('.', $tmp);

      // Add Sin
      $currentSoulNode.addChild(new Node('violation', $note.message, [
        beginline : $note.year,
        endline   : $note.year,
        rule      : $truthName,
        ruleset   : $truthSet,
        'method'  : $note.featName,
        'class'   : $note.questName,
        'package' : (null === $note.crusadeName ? '+global' : $note.crusadeName),
        priority  : self::$priorityMapping[$note.severity.name()]
      ]));
    }

    // Make a Tree out of it
    $tree= new Tree().withEncoding('UTF-8').withRoot($root);

    // Write to output
    $this.out.writeLine($tree.getDeclaration());
    $this.out.write($tree.getSource());
  }
}
