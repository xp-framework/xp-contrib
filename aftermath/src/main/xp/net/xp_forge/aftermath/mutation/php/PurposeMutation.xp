/**
 * This file is part of the XP-Framework
 *
 * Aftermath
 * Copyright (c) 2011, XP-Framework Team
 */
package net.xp_forge.aftermath.mutation.php;

import util.Observer;
import util.Observable;

import net.xp_forge.aftermath.Soul;
import net.xp_forge.aftermath.Feat;
import net.xp_forge.aftermath.Deed;
import net.xp_forge.aftermath.Quest;
import net.xp_forge.aftermath.Moment;
import net.xp_forge.aftermath.Crusade;
import net.xp_forge.aftermath.Mutation;
import net.xp_forge.aftermath.DeedUtils;

import native core.strlen;
import native standard.count;
import native standard.explode;
import native standard.dirname;
import native standard.in_array;
import native standard.array_pop;
import native standard.str_replace;

/**
 * Identify purpose (Feat, Quest & Crusade) for
 * all Deeds in the chain
 *
 * Also rename T_FUNCTION to A_METHOD for class methods
 *
 */
public class PurposeMutation implements Mutation {
  private static string[] $prefixDeeds= [
    'T_PUBLIC', 'T_PROTECTED', 'T_PRIVATE', 'T_ABSTRACT', 'T_FINAL', 'T_STATIC',
    'T_WHITESPACE', 'A_NEWLINE', 'A_ANNOTATION', 'T_DOC_COMMENT'
  ];

  private Crusade $crusade;
  private int $classBraceLevel;
  private Quest $quest;
  private int $methodBraceLevel;
  private Feat $feat;

  /**
   * Reset state flags
   *
   * @return void
   */
  private void reset() {
    $this.crusade          = null;
    $this.classBraceLevel  = -1;
    $this.quest            = null;
    $this.methodBraceLevel = -1;
    $this.feat             = null;
  }

  /**
   * @inheritDoc
   *
   */
  public void apply(Deed $deed) {

    // First Deed
    if (null === $deed.previous) {

      // Reset state
      $this.reset();

      // Get Crusade (we assume one Crusade per Soul -- one Package per File)
      $this.crusade= $this.getSoulCrusade($deed.soul);
    }

    // Class start definition
    if (
      ('T_CLASS' === $deed.name || 'T_INTERFACE' === $deed.name) &&
      null !== ($deedBegin= $deed.begin)
    ) {

      // Get class name
      if (null !== ($classNameDeed= DeedUtils::getNextNonWhitespace($deed))) {
        $questName= $classNameDeed.description;

        // Create new Quest
        $this.quest= new Quest($questName, $deedBegin);

        // Reset brace level
        $this.classBraceLevel= 0;
      }

      // Detect prefix Deeds: Deeds that are before the "class" keyword, but are part of this Quest
      $previous= $deed;
      while (
        null !== ($previous= $previous.previous) &&
        null === $deed.quest &&
        in_array($previous.name, self::$prefixDeeds) &&
        null !== ($previousBegin= $previous.begin)
      ) {

        // Break on empty line; two-consecutive NEWLINEs that is
        if (
          'A_NEWLINE' === $previous.name &&
          null !== ($previousPrevious= $previous.previous) &&
          ('A_NEWLINE' === $previousPrevious.name || 'T_OPEN_TAG' === $previousPrevious.name)
        ) break;

        // This is prefix Deed; update values
        $previous.quest   = $this.quest;
        $this.quest.begin = new Moment($previousBegin.year, $previousBegin.day);
      }
    }

    // Method start definition
    if (
      'T_FUNCTION' === $deed.name &&
      null !== ($deedBegin= $deed.begin) &&
      null !== $this.quest &&                 // Check we are inside a class definition
      null === $this.feat                     // Check we are not already in a method definition
    ) {

      // Rename Deed
      $deed.name= 'A_METHOD';

      // Get method name
      $methodNameDeed= DeedUtils::getNextNonWhitespace($deed);
      if (null !== $methodNameDeed) {

        // Create new Feat
        $this.feat= new Feat($methodNameDeed.description, $deedBegin);

        // Reset brace level
        $this.methodBraceLevel= 0;
      }

      // Detect prefix Deeds: Deeds that are before the "function" keyword, but are part of this Feat
      $previous= $deed;
      while (
        null !== ($previous= $previous.previous) &&
        null === $deed.feat &&
        in_array($previous.name, self::$prefixDeeds) &&
        null !== ($previousBegin= $previous.begin)
      ) {

        // Break on empty line; two-consecutive NEWLINEs that is
        if (
          'A_NEWLINE' === $previous.name &&
          null !== ($previousPrevious= $previous.previous) &&
          ('A_NEWLINE' === $previousPrevious.name || 'T_OPEN_TAG' === $previousPrevious.name)
        ) break;

        // This is prefix Deed; update values
        $previous.feat   = $this.feat;
        $this.feat.begin = new Moment($previousBegin.year, $previousBegin.day);
      }
    }

    // Update Feat, Quest & Crusade
    $deed.feat    = $this.feat;
    $deed.quest   = $this.quest;
    $deed.crusade = $this.crusade;

    // Monitor brace level and exit class context
    if ('A_OPEN_BRACE' === $deed.name && $this.classBraceLevel > -1) {
      $this.classBraceLevel++;
    }

    if ('A_CLOSE_BRACE' === $deed.name && $this.classBraceLevel > -1) {
      if (0 === --$this.classBraceLevel) {

        // Update Quest
        if (null !== ($deedEnd= $deed.end)) {
          $this.quest.end= new Moment($deedEnd.year, $deedEnd.day);
        }

        // Reset state
        $this.quest           = null;
        $this.classBraceLevel = -1;
      }
    }

    // Monitor brace level and exit method context
    if ('A_OPEN_BRACE' === $deed.name && $this.methodBraceLevel >= 0) {
      $this.methodBraceLevel++;
    }
    if ('A_CLOSE_BRACE' === $deed.name && $this.methodBraceLevel >= 0) {
      if (0 === --$this.methodBraceLevel) {

        // Update Feat
        if (null !== ($deedEnd= $deed.end)) {
          $this.feat.end= new Moment($deedEnd.year, $deedEnd.day);
        }

        // Reset state
        $this.feat             = null;
        $this.methodBraceLevel = -1;
      }
    }
  }

  /**
   * Identify Crusade based on Soul
   *
   * @param  net.xp_forge.aftermath.Soul $soul
   * @return net.xp_forge.aftermath.Crusade
   * @aka    getPackagefromFile
   */
  public Crusade getSoulCrusade(Soul $soul) {

    // If this Soul is not part of a Realm; return null
    if (null === $soul.getRealm()) return null;

    // Package name is basically basename(soul name)
    $crusadeName= str_replace(['\\', '/'], '.', dirname($soul.getName()));

    // Build Crusade
    return new Crusade($crusadeName);
  }
}
