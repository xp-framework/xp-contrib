/**
 * This file is part of the XP-Framework
 *
 * Aftermath
 * Copyright (c) 2011, XP-Framework Team
 */
package net.xp_forge.aftermath.mutation.php;

import net.xp_forge.aftermath.Deed;
import net.xp_forge.aftermath.Moment;
import net.xp_forge.aftermath.Mutation;

import native core.strlen;
import native standard.count;
import native standard.explode;
import native standard.array_pop;

/**
 * Calculate begin & end moments for all Deeds in the chain
 *
 */
public class TimeMutation implements Mutation {

  /**
   * @inheritDoc
   *
   */
  public void apply(Deed $deed) {

    // This is the first Deed
    if (null === ($previous= $deed.previous) || null === ($begin= $previous.begin)) {
      $deed.begin= new Moment(1, 1);
      return;
    }

    // Init year/day with values from the previous Deed
    $year = $begin.year;
    $day  = $begin.day;

    // Analyze previous Deed's description to get the duration
    // Based on the previous Deed's year/day and duration we can
    // then calculate this Deed's year/day
    if ('A_NEWLINE' === $previous.name) {
      $year++;
      $day= 1;

    } else {
      $tmp= explode("\n", $previous.description);

      if (1 !== count($tmp)) {
        $year += count($tmp) - 1;
        $day   = 1;
      }
      $day += strlen(array_pop($tmp));
    }

    // Update Deed's begin moment
    $deed.begin= new Moment($year, $day);

    // Update previous Deed's end moment
    // Note: NEWLINEs are sooo special
    if ('A_NEWLINE' === $previous) {
      $previous.end= new Moment($previous.begin.year, $previous.begin.day);
    } else {
      $previous.end= new Moment($year, $day - 1);
    }
  }
}
