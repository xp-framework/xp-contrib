/**
 * This file is part of the XP-Framework
 *
 * Aftermath
 * Copyright (c) 2011, XP-Framework Team
 */
package net.xp_forge.aftermath.realm;

import io.File;
import io.Folder;
import io.IOException;
import io.FileNotFoundException;

import net.xp_forge.aftermath.Realm;
import net.xp_forge.aftermath.Soul;
import net.xp_forge.aftermath.soul.FileSoul;
import net.xp_forge.aftermath.realm.RealmNotFoundException;

import native standard.rtrim;
import native standard.array_merge;

/**
 * Represents a filesystem-based (io.Folder) implementation
 * of the Realm interface
 *
 * @aka Project
 */
public class FileRealm extends Realm {
  protected Folder $folder;
  protected Soul[] $souls;
  protected string $name;

  /**
   * Constructor
   *
   * @param  string $location
   * @throws net.xp_forge.aftermath.realm.RealmNotFoundException
   */
  public __construct(Folder $folder) throws RealmNotFoundException {

    // Check Realm exists
    if (!$folder.exists()) {
      throw new RealmNotFoundException('Folder not found [' ~ $folder.getURI() ~ ']');
    }

    // Get Realm's name
    $this.name= rtrim($folder.getURI(), '/\\');

    // Save folder
    $this.folder= $folder;
  }

  /**
   * Get this Realm's name
   *
   * @aka    getFolderPath()
   * @return string
   */
  public string getName(){
    return $this.name;
  }

  /**
   * Get all Souls that live in this Realm
   *
   * @aka    getFiles()
   * @return net.xp_forge.aftermath.Soul[]
   * @throws net.xp_forge.aftermath.realm.RealmNotFoundException
   */
  public Soul[] getSouls() throws RealmNotFoundException {

    // Cache hit
    if (null !== $this.souls) return $this.souls;

    // Init list of Souls
    $this.souls= [];

    // Read all File entries and make Souls out of them
    $fileNames= $this.getFolderFiles($this.folder);
    for ($fi= 0, $fn= $fileNames.length; $fi < $fn; $fi++) {
      $fileName= $fileNames[$fi];
      $this.souls[]= new FileSoul(new File($this.folder, $fileName), $this);
    }

    // Return list of collected Souls
    return $this.souls;
  }

  /**
   * Recursively get all File names in the spcified Folder
   * (w/o path)
   *
   * @return string[]
   */
  protected string[] getFolderFiles(Folder $folder, string $startPath= '') {
    $retVal= [];

    while(false !== ($entry= $folder.getEntry())) {
      $subFolder= new Folder($folder, $entry);
      if (!$subFolder.exists()) {
        $retVal[]= $startPath ~ DIRECTORY_SEPARATOR ~ $entry;
      } else {
        $retVal= array_merge(
          $retVal,
          $this.getFolderFiles($subFolder, $startPath ~ DIRECTORY_SEPARATOR ~ $entry)
        );
      }
    }

    return $retVal;
  }
}
