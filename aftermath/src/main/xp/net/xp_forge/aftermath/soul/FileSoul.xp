/**
 * This file is part of the XP-Framework
 *
 * Aftermath
 * Copyright (c) 2011, XP-Framework Team
 */
package net.xp_forge.aftermath.soul;

import io.File;
import io.FileUtil;
import io.IOException;

import net.xp_forge.aftermath.Realm;
import net.xp_forge.aftermath.Soul;
import net.xp_forge.aftermath.Deed;
import net.xp_forge.aftermath.Creed;
import net.xp_forge.aftermath.soul.SoulNotFoundException;

import native standard.ltrim;
import native standard.strpos;
import native standard.substr;
import native standard.str_replace;

/**
 * Represents a filesystem-based (io.File) implementation
 * of the Soul interface
 *
 * @aka File
 */
class FileSoul extends Soul {
  protected Realm $realm;
  protected File $file;
  protected string $name;
  protected string $stigma;

  /**
   * Constructor
   *
   * @param  io.File $file
   * @param  net.xp_forge.aftermath.Realm $realm
   * @throws net.xp_forge.aftermath.soul.SoulNotFoundException
   */
  public __construct(File $file, Realm $realm= null) throws SoulNotFoundException {

    // Check Soul exists
    try {
      $size= $file.size();
    } catch (IOException $ex) {
      throw new SoulNotFoundException('File not found [' ~ $file.getURI() ~ ']');
    }

    // Get Soul's name: filename minus realm name
    $this.name= (null === $realm) ?
      $file.getURI() :
      ltrim(str_replace($realm.getName(), '', $file.getURI()), '/\\');

    // Get Soul's Stigma (null for .dotfiles and file without extension)
    $fileName= $file.getFileName();
    $dotPosition= strpos($fileName, '.');
    if (false !== $dotPosition && 0 !== $dotPosition) {
      $this.stigma= substr($fileName, $dotPosition + 1);
    }

    $this.file  = $file;
    $this.realm = $realm;
  }

  /**
   * Get this Soul's name
   *
   * Returns Filepath relative to Realm's Folderpath
   *
   * @aka    getFilePath()
   * @return string
   */
  public string getName(){
    return $this.name;
  }

  /**
   * Get this Soul's Realm
   *
   * @aka    getProject()
   * @return net.xp_forge.aftermath.Realm
   */
  public Realm getRealm() {
    return $this.realm;
  }

  /**
   * Get this Soul's stigma. Based on this one can get this Soul's Creed
   *
   * @aka    getExtension()
   * @return string null if this Soul has no Creed
   */
  public string getStigma() {
    return $this.stigma;
  }

  /**
   * Get this Soul's Essence
   *
   * @return string
   * @aka    getContents()
   * @throws net.xp_forge.aftermath.soul.SoulNotFoundException
   */
  public string getEssence() throws SoulNotFoundException {
    try {
      return FileUtil::getContents($this.file);

    } catch (IOException $ex) {
       throw new SoulNotFoundException('Cannot read file contents [' ~ $this.file.getURI() ~ ']', $ex);
    }
  }
}
