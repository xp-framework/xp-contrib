/**
 * This file is part of the XP-Framework
 *
 * Aftermath
 * Copyright (c) 2011, XP-Framework Team
 */
package net.xp_forge.aftermath.truth.php.comment;

import net.xp_forge.aftermath.Deed;
import net.xp_forge.aftermath.DeedUtils;
import net.xp_forge.aftermath.truth.PhpTruth;

/**
 * Suggests to compact multiple consecutive one-line comments into
 * one multi-line comment
 *
 * Exceptions:
 * - ignore Perl-style comments: # comment
 *
 * @test xp://unittest.net.xp_forge.aftermath.truth.php.comment.CompactConsecutiveOnelineCommentsPhpTruthTest
 */
[
  @severity('info'),
  @name('Compact consecutive one-line comments'),
  @message('There are more than ${max} consecutive one-line comments. Consider compacting them into one multi-line comment')
]
public class CompactConsecutiveOnelineCommentsPhpTruth extends PhpTruth {
  [@param(type= 'integer', description= 'Max allowed consecutive one-line comments. Default: 2')]
  public int $max= 2;

  /**
   * @inheritDoc
   *
   */
  public bool forbids(Deed $deed) {
    if (
      'T_COMMENT' !== $deed.name ||
      (null !== ($next= DeedUtils::getNextNonWhitespace($deed, true)) && 'T_COMMENT' === $next.name) ||
      null === ($previous= DeedUtils::getPreviousNonWhitespace($deed, true))
    ) return false;

    // Walk backward (ignoring whitespace and newlines) until we find a Deed different than 'T_COMMENT'
    $count= 1;
    while ('T_COMMENT' === $previous.name && null !== ($previous= DeedUtils::getPreviousNonWhitespace($previous, true))) {
      $count++;
    }

    // Threshold not exceeded
    if ($count <= $this.max) return false;

    // Got ya!
    return true;
  }
}
