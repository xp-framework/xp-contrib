/**
 * This file is part of the XP-Framework
 *
 * Aftermath
 * Copyright (c) 2011, XP-Framework Team
 */
package net.xp_forge.aftermath.truth.php.comment;

import net.xp_forge.aftermath.Deed;
import net.xp_forge.aftermath.truth.PhpTruth;

/**
 * Checks for missing method API doc
 *
 * Note: This Truth makes use of backward-walking code in PurposeMutation
 *
 * @see  xp://net.xp_forge.aftermath.mutation.php.PurposeMutation
 * @test xp://unittest.net.xp_forge.aftermath.truth.php.comment.MethodApidocPhpTruthTest
 */
[
  @severity('blocker'),
  @name('Method API doc'),
  @message('API doc missing for the defined method')
]
public class MethodApidocPhpTruth extends PhpTruth {

  /**
   * @inheritDoc
   *
   */
  public bool forbids(Deed $deed) {
    if ('A_METHOD' !== $deed.name ||
      null === $deed.quest ||
      null === ($deedFeat= $deed.feat)
    ) return false;

    // Ignore __static() magic method
    if ('__static' === $deedFeat.name) return false;

    // Check all previous Deeds that are part of this Feat
    // and look for a T_DOC_COMMENT
    $previous= $deed;
    while (
      null !== ($previous= $previous.previous) &&
      null !== ($previousFeat= $previous.feat) &&
      $deedFeat.name === $previousFeat.name
    ) {
      if ('T_DOC_COMMENT' === $previous.name) return false;
    }

    // Method API doc not found
    return true;
  }
}
