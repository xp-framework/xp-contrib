/**
 * This file is part of the XP-Framework
 *
 * Aftermath
 * Copyright (c) 2011, XP-Framework Team
 */
package net.xp_forge.aftermath.truth.php.layout;

import net.xp_forge.aftermath.Deed;
import net.xp_forge.aftermath.DeedUtils;
import net.xp_forge.aftermath.truth.PhpTruth;

import native standard.in_array;

/**
 * Enforces that there is a NEWLINE character after closing brace
 *
 * Exceptions:
 * - trailing comments
 *
 * - if/else[if], do/while and try/catch statements:
 *
 *    if (...) {
 *      ...
 * -> } else[ if] {
 *      ...
 *    }
 *
 *    do {
 *      ...
 * -> } while (...)
 *
 *    try {
 *      ...
 * -> } catch(...)
 *
 * @test xp://unittest.net.xp_forge.aftermath.truth.php.layout.NewlineAfterCloseBracePhpTruthTest
 */
[
  @severity('minor'),
  @name('Newline after closing-brace'),
  @message('There must be a NEWLINE character after closing brace')
]
public class NewlineAfterCloseBracePhpTruth extends PhpTruth {
  protected static string[] $allowedDeedsAfterCloseBrace= [
    'A_NEWLINE', 'T_COMMENT', 'T_ELSE', 'T_ELSEIF', 'T_WHILE', 'T_CATCH', 'A_FINALLY'
  ];

  /**
   * @inheritDoc
   *
   */
  public bool forbids(Deed $deed) {
    return (
      'A_CLOSE_BRACE' === $deed.name &&
      null !== ($next= DeedUtils::getNextNonWhitespace($deed)) &&
      !in_array($next.name, self::$allowedDeedsAfterCloseBrace)
    );
  }
}
