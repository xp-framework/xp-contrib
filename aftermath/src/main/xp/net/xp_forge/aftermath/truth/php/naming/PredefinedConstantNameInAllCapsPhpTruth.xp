/**
 * This file is part of the XP-Framework
 *
 * Aftermath
 * Copyright (c) 2011, XP-Framework Team
 */
package net.xp_forge.aftermath.truth.php.naming;

import net.xp_forge.aftermath.Deed;
import net.xp_forge.aftermath.DeedUtils;
import net.xp_forge.aftermath.truth.PhpTruth;

import native standard.in_array;
import native standard.strtoupper;

/**
 * Enforces that all predefined constant names must use the ALL_CAPS notation
 *
 * List includes:
 * - TRUE
 * - FALSE
 * - NULL
 *
 * Exception:
 * - function names can be true(), false(), null()
 *
 * @test xp://unittest.net.xp_forge.aftermath.truth.php.naming.PredefinedConstantNameInAllCapsPhpTruthTest
 */
[
  @severity('major'),
  @name('Predefined constant name in ALL_CAPS'),
  @message('Predefined constant name (TRUE, FALSE, NULL) does not use the ALL_CAPS notation')
]
public class PredefinedConstantNameInAllCapsPhpTruth extends PhpTruth {
  private static string[] $predefinedConstants= [
    'TRUE', 'FALSE', 'NULL'
  ];

  /**
   * @inheritDoc
   *
   */
  public bool forbids(Deed $deed) {
    if ('T_STRING' !== $deed.name || !in_array(strtoupper($deed.description), self::$predefinedConstants)) return false;

    // Is upper case: good
    if ($deed.description === strtoupper($deed.description)) return false;

    // Check previous Deed to see if this is not a function
    if (
      null !== ($previous= DeedUtils::getPreviousNonWhitespace($deed)) &&
      (
        'A_METHOD' === $previous.name ||
        'T_FUNCTION' === $previous.name ||
        'T_DOUBLE_COLON' === $previous.name ||
        'T_OBJECT_OPERATOR' === $previous.name
      )
    ) return false;

    // Got ya!
    return true;
  }
}
