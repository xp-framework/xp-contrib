/**
 * This file is part of the XP-Framework
 *
 * Aftermath
 * Copyright (c) 2011, XP-Framework Team
 */
package net.xp_forge.aftermath.truth.php.naming;

import net.xp_forge.aftermath.Deed;
import net.xp_forge.aftermath.DeedUtils;
import net.xp_forge.aftermath.truth.PhpTruth;

import native standard.substr;
import native standard.strpos;
import native standard.ucfirst;
import native standard.in_array;

/**
 * Enforces that all variable names must use the $camelCase notation
 *
 * Exception:
 * - static members usage:
 *   $cur= Currency::$EUR;
 *
 * - static members declaration:
 *   class DummyTestClass {
 *     public static $AED,
 *       $AFN,
 *       $ALL;
 *   }
 *
 * @test xp://unittest.net.xp_forge.aftermath.truth.php.naming.VariableNameInCamelCasePhpTruthTest
 */
[
  @severity('critical'),
  @name('Variable name in $camelCase'),
  @message('Variable name does not use the $camelCase notation')
]
public class VariableNameInCamelCasePhpTruth extends PhpTruth {
  protected static string[] $superGlobals= [
    '$GLOBALS',
    '$_SERVER',
    '$_REQUEST',
    '$_GET',
    '$_POST',
    '$_FILES',
    '$_SESSION',
    '$_COOKIE',
    '$_ENV'
  ];

  /**
   * @inheritDoc
   *
   */
  public bool forbids(Deed $deed) {
    if (
      'T_VARIABLE' !== $deed.name ||
      in_array($deed.description, self::$superGlobals)
    ) return false;

    // Get variable name
    $name= substr($deed.description, 1);

    // Ignore magic variables (_protected, __magic)
    if ('_' === substr($name, 0, 1)) return false;

    // Correct name: good
    if (
      false === strpos($name, '_') &&        // Does not contain underscores '_'
      $name !== ucfirst($name)               // Does not start with capital letter
    ) return false;

    // Ignore static members usage
    if (null !== ($previous= $deed.previous) && 'T_DOUBLE_COLON' === $previous.name) return false;

    // Ignore static members declaration
    if (null !== $deed.quest && null === $deed.feat) {

      // Scan previous Deeds for 'T_STATIC'
      $previous= $deed;
      while (
        null !== ($previous= $previous.previous) &&
        'A_SEMICOLON' !== $previous.name &&
        'A_OPEN_CURLY' !== $previous.name
      ) {

        // Found 'static' keyword: good
        if ('T_STATIC' === $previous.name) return false;
      }
    }

    // Got ya!
    return true;
  }
}
