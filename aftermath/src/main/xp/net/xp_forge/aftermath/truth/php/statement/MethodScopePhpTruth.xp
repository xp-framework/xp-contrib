/**
 * This file is part of the XP-Framework
 *
 * Aftermath
 * Copyright (c) 2011, XP-Framework Team
 */
package net.xp_forge.aftermath.truth.php.statement;

import net.xp_forge.aftermath.Deed;
import net.xp_forge.aftermath.truth.PhpTruth;

import native standard.in_array;

/**
 * Checks that all class methods have a scope defined
 *
 * @test xp://unittest.net.xp_forge.aftermath.truth.php.statement.MethodScopePhpTruthTest
 */
[
  @severity('major'),
  @name('Method must have scope defined'),
  @message('Class method does not have a scope defined')
]
public class MethodScopePhpTruth extends PhpTruth {
  private static string[] $scopes= [
    'T_PUBLIC', 'T_PROTECTED', 'T_PRIVATE'
  ];

  /**
   * @inheritDoc
   *
   */
  public bool forbids(Deed $deed) {
    if (
      'A_METHOD' !== $deed.name ||
      null === $deed.quest ||
      null === ($deedFeat= $deed.feat)
    ) return false;

    // Ignore __static() magic method
    if ('__static' === $deedFeat.name) return false;

    // Check previous deeds for "private", "protected" or "public"
    $previous= $deed;
    while (
      null !== ($previous= $previous.previous) &&
      null !== ($previousFeat= $previous.feat) &&
      $previousFeat.name === $deedFeat.name
    ) {

      // Scope found
      if (in_array($previous.name, self::$scopes)) return false;
    }

    // Scope not found
    return true;
  }
}
