/**
 * This file is part of the XP-Framework
 *
 * Aftermath
 * Copyright (c) 2011, XP-Framework Team
 */
package net.xp_forge.aftermath.truth.php.whitespace;

import net.xp_forge.aftermath.Deed;
import net.xp_forge.aftermath.DeedUtils;
import net.xp_forge.aftermath.truth.PhpTruth;

/**
 * Enforces that there is one SPACE character after comma
 *
 * Exception:
 * - Trailing NEWLINEs:
 *   $a= array(
 *     0 => 'null',
 *     1 => 'eins',
 *     2 => 'zwei'
 *   );             ^
 *                  | trailing spaces are OK
 *
 * - Trailing comments:
 *   $a= array(
 *     0 => 'null',  // one
 *     1 => 'eins',  // two
 *     2 => 'zwei'   // three
 *   );               ^
 *                    | trailing comments
 *
 * - Aligned statements:
 *   define('CHART_HORIZONTAL',  0x0000);
 *   define('CHART_VERTICAL',    0x0001);
 *                              ^
 *                              | aligned whitespace
 *
 * - Aligned commas:
 *   protected static $yyLhs= array(
 *      0,     0,     0,     0,     1,     1,     5,     5,     6,     7,
 *      7,     2,     2,     9,     9,     3,     3,     8,     8,    10,
 *     10,    10,    10,    10,    10,    10,    10,    10,    10,     4,
 *   }          ^
 *              | aligned commas
 *
 * @test xp://unittest.net.xp_forge.aftermath.truth.php.whitespace.OneSpaceAfterCommaPhpTruthTest
 */
[
  @severity('minor'),
  @name('One space after comma'),
  @message('There must be one SPACE character after comma')
]
public class OneSpaceAfterCommaPhpTruth extends PhpTruth {

  /**
   * @inheritDoc
   *
   */
  public bool forbids(Deed $deed) {
    if ('A_COMMA' !== $deed.name || null === ($next= $deed.next)) return false;

    // Check $next is either ONESPACE (' ') or NEWLINE
    if ($next.is('T_WHITESPACE', ' ') || 'A_NEWLINE' === $next.name) return false;

    // If $next is not WHITESPACE; we have a problem
    if ('T_WHITESPACE' !== $next.name) return true;

    // Check for trailing spaces or trailing comments
    if (
      (null !== ($nextNext= $next.next)) &&
      ('A_NEWLINE' === $nextNext.name || 'T_COMMENT' === $nextNext.name)
    ) return false;

    // Check for aligned statements (WHITESPACE is right aligned that is)
    if (DeedUtils::isWhitespaceAligned($next)) return false;

    // Check for aligned commas
    if (DeedUtils::isAligned($deed)) return false;

    // Got ya!
    return true;
  }
}
