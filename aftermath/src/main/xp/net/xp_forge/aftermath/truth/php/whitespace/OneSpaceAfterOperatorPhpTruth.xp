/**
 * This file is part of the XP-Framework
 *
 * Aftermath
 * Copyright (c) 2011, XP-Framework Team
 */
package net.xp_forge.aftermath.truth.php.whitespace;

import net.xp_forge.aftermath.Deed;
import net.xp_forge.aftermath.DeedUtils;
import net.xp_forge.aftermath.truth.PhpTruth;

import native standard.in_array;

/**
 * Enforces that there is one SPACE character after every operator
 *
 * Exception:
 * - logical operators inside long conditions can be followed by a NEWLINE or a trailing comment
 *   if (
 *     1 === 2 &&
 *     3 === 4 &&    // imposible!
 *     5 === 6
 *   )
 *
 * @test xp://unittest.net.xp_forge.aftermath.truth.php.whitespace.OneSpaceAfterOperatorPhpTruthTest
 */
[
  @severity('minor'),
  @name('One space after operator'),
  @message('There must be one SPACE character after operator')
]
public class OneSpaceAfterOperatorPhpTruth extends PhpTruth {
  protected static string[] $operators= [
    'T_AND_EQUAL',              // &=
    'T_CLONE',                  // clone
    'T_CONCAT_EQUAL',           // .=
    'T_DIV_EQUAL',              // /=
    'T_INSTANCEOF',             // instanceof
    'T_IS_EQUAL',               // ==
    'T_IS_GREATER_OR_EQUAL',    // >=
    'T_IS_IDENTICAL',           // ===
    'T_IS_NOT_EQUAL',           // !=
    'T_IS_NOT_IDENTICAL',       // !==
    'T_IS_SMALLER_OR_EQUAL',    // <=
    'T_LOGICAL_AND',            // &
    'T_LOGICAL_OR',             // |
    'T_LOGICAL_XOR',            // xor
    'T_MINUS_EQUAL',            // -=
    'T_MOD_EQUAL',              // %=
    'T_MUL_EQUAL',              // *=
    'T_NEW',                    // new
    'T_OR_EQUAL',               // |=
    'T_PLUS_EQUAL',             // +=
    'T_SL',                     // <<
    'T_SL_EQUAL',               // <<=
    'T_SR',                     // >>
    'T_SR_EQUAL',               // >>=
    'T_XOR_EQUAL'               // ^=
  ];

  protected static string[] $logicalOperators= [
    'T_BOOLEAN_AND',            // &&
    'T_BOOLEAN_OR'              // ||
  ];

  /**
   * @inheritDoc
   *
   */
  public bool forbids(Deed $deed) {
    if (
      (
        false === ($isOperator= in_array($deed.name, self::$operators)) &&
        false === ($isLogical= in_array($deed.name, self::$logicalOperators))
      ) ||
      null === ($next= $deed.next) ||
      $next.is('T_WHITESPACE', ' ')
    ) return false;

    // Operators must be followed by a single SPACE
    if (true === $isOperator) return true;

    // For logical operators, we also accept trailing whitespace and trailing comments
    if (
      null === ($next= DeedUtils::getNextNonWhitespace($deed)) ||
      'A_NEWLINE' === $next.name ||
      'T_COMMENT' === $next.name
    ) return false;

    // Got ya!
    return true;
  }
}
