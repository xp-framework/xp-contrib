/**
 * This file is part of the XP-Framework
 *
 * Aftermath
 * Copyright (c) 2011, XP-Framework Team
 */
package unittest.net.xp_forge.aftermath.truth.php;

import net.xp_forge.aftermath.Sin;
import net.xp_forge.aftermath.Soul;
import net.xp_forge.aftermath.Deed;
import net.xp_forge.aftermath.Realm;
import net.xp_forge.aftermath.Creed;
import net.xp_forge.aftermath.Truth;

import unittest.net.xp_forge.aftermath.JunkFactory;

import unittest.TestCase;
import lang.IllegalStateException;
import lang.ElementNotFoundException;

/**
 * Base class for testing PHP Truths
 *
 */
public class PhpTruthTest extends TestCase {
  protected static string $sampleCleanCode= '<?php
    /**
     * File API-DOC comment
     *
     * $Id:$
     */
    uses(
      \'namespace.one\',
      \'namespace.two\'
    );

    /**
     * Class API-DOC comment
     *
     */
    public class DummyTestClass {
      const IN_ALL_CAPS= 0;
      protected $value= \'default value\';
      protected $other= NULL;

      /**
       * Constructor
       *
       * @param  string $someValue
       * @param  string $otherValue
       * @return void
       */
      public function __construct($someValue, $otherValue) {

        // Save values
        $this->value= $someValue;
        $this->other= (string)$otherValue;
      }

      /**
       * This is a sample method
       *
       * @param  int $value
       * @param  int $count
       * @return int
       */
      public function sampleMethod(int $value, int $count) {
        return $value * $count;
      }
    }
  ?>';

  /**
   * This test will be run against all Truth test classes
   * that extend this base class
   *
   * @return void
   */
  [@test]
  public void should_find_no_sins_on_sample_clean_code() {
    $sins= $this.getSins(self::$sampleCleanCode);
    $this.assertEquals(0, $sins.length);
  }

  /**
   * Return all Sins after running the class contents thru
   * the Truth specified by the @truth annotation
   *
   * @param  string $soulEssence
   * @return net.xp_forge.aftermath.Sin[]
   */
  protected Sin[] getSins(string $soulEssence) {
    $retVal= [];

    // Init Truth
    $truth= $this.getTestedTruth();

    // Produce a dummy Soul and get reference to the first Deed
    $soul= $this.getTestedSoul($soulEssence);
    $deed= Creed::forName('PHP').getConfessor().interrogate($soul);

    // Check all Deeds against the specified Truth
    do {
      if (!$truth.forbids($deed)) continue;

      // If Deed is forbidden by this Truth: add the Sin to list
      $retVal[]= new Sin($soul, $deed, $truth);
    } while (null !== ($deed= $deed.next));

    return $retVal;
  }

  /**
   * Return Deeds chain
   *
   * @param  string $soulEssence
   * @return net.xp_forge.aftermath.Deed
   */
  protected Deed getFirstDeed(string $soulEssence) {
    $retVal= [];

    // Init Truth
    $truth= $this.getTestedTruth();

    // Produce a dummy Soul and get reference to the first Deed
    $soul= $this.getTestedSoul($soulEssence);
    return Creed::forName('PHP').getConfessor().interrogate($soul);
  }

  /**
   * Make a dummy Soul with the specified Essence
   *
   * Will try to read Soul name from annotation, and will default
   * to 'DummyTestClass.class.php'. Example annotation:
   * @soul(name= 'MySoul.class.php')
   *
   * @param  string $soulEssence
   * @return net.xp_forge.aftermath.Soul
   */
  protected Soul getTestedSoul(string $soulEssence) {

    // Read Soul name from annotation; if any
    try {
      $soulName= $this.getClass().getAnnotation('soul', 'name');

    // Missing @soul(name) annotation
    } catch (ElementNotFoundException $ex) {
      $soulName= 'DummyTestClass.class.php';
    }

    return JunkFactory::produceSoul($soulName, $soulEssence);
  }

  /**
   * Build a Truth instance based on the class @truth(class) annotation:
   *
   * @truth(class= 'my.super.Truth')
   *
   * @return net.xp_forge.aftermath.Truth
   * @throw  lang.IllegalStateException
   */
  protected Truth getTestedTruth() throws IllegalStateException {
    try {
      $truthFqcn= $this.getClass().getAnnotation('truth', 'class');
      return XPClass::forName($truthFqcn).newInstance($truthFqcn);

    // Missing @truth(class) annotation
    } catch (ElementNotFoundException $ex) {
      throw new IllegalStateException('Missing @truth(class) annotation on [' ~ $this.getClassName() ~ ']', $ex);

    // Invalid @truth(class) annotation
    } catch (ClassNotFoundException $ex) {
      throw new IllegalStateException(
        'Invalid @truth(class) annotation [' ~ $truthFqcn ~ '] on [' ~ $this.getClassName() ~ ']',
        $ex
      );
    }
  }
}
