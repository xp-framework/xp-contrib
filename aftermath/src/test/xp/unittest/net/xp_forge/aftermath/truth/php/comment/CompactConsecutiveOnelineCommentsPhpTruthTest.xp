/**
 * This file is part of the XP-Framework
 *
 * Aftermath
 * Copyright (c) 2011, XP-Framework Team
 */
package unittest.net.xp_forge.aftermath.truth.php.comment;

import unittest.net.xp_forge.aftermath.truth.php.PhpTruthTest;

/**
 * Testcase
 *
 * @see xp://net.xp_forge.aftermath.truth.php.comment.CompactConsecutiveOnelineCommentsPhpTruth
 */
[@truth(class= 'net.xp_forge.aftermath.truth.php.comment.CompactConsecutiveOnelineCommentsPhpTruth')]
public class CompactConsecutiveOnelineCommentsPhpTruthTest extends PhpTruthTest {

  /**
   * Catch more than 2 comments
   *
   * @return void
   */
  [@test]
  public void should_catch_more_than_two_comments() {
    $sins= $this.getSins('<?php
      // This is line 1
      // This is line 2
      // This is line 3
    ?>');
    $this.assertEquals(1, $sins.length);
  }

  /**
   * Catch just once
   *
   * @return void
   */
  [@test]
  public void should_catch_just_once() {
    $sins= $this.getSins('<?php
      // This is line 1
      // This is line 2
      // This is line 3
      // This is line 4
      // This is line 5
      // This is line 6
    ?>');
    $this.assertEquals(1, $sins.length);
  }

  /**
   * Ignore 2 comments
   *
   * @return void
   */
  [@test]
  public void should_ignore_two_comments() {
    $sins= $this.getSins('<?php
      // This is line 1
      // This is line 2
    ?>');
    $this.assertEquals(0, $sins.length);
  }

  /**
   * Ignore multiline comments
   *
   * @return void
   */
  [@test]
  public void should_ignore_multiline_comments() {
    $sins= $this.getSins('<?php
      /* This is line 1
       * This is line 2
       * This is line 3
       */
      /* This is line 1
       * This is line 2
       * This is line 3
       */
      /* This is line 1
       * This is line 2
       * This is line 3
       */
    ?>');
    $this.assertEquals(0, $sins.length);
  }

  /**
   * Ignore doc comments
   *
   * @return void
   */
  [@test]
  public void should_ignore_doc_comments() {
    $sins= $this.getSins('<?php
      /**
       * This is line 1
       * This is line 2
       * This is line 3
       */
      /**
       * This is line 1
       * This is line 2
       * This is line 3
       */
      /**
       * This is line 1
       * This is line 2
       * This is line 3
       */
    ?>');
    $this.assertEquals(0, $sins.length);
  }

  /**
   * Ignore annotation comments
   *
   * @return void
   */
  [@test]
  public void should_ignore_annotation_comments() {
    $sins= $this.getSins('<?php
      #[This is line 1]
      #[This is line 2]
      #[This is line 3]
      #[This is line 4]
    ?>');
    $this.assertEquals(0, $sins.length);
  }

  /**
   * Ignore "#" comments
   *
   * @return void
   */
  [@test]
  public void should_ignore_perl_comments() {
    $sins= $this.getSins('<?php
      # This is line 1
      # This is line 2
      # This is line 3
    ?>');
    $this.assertEquals(0, $sins.length);
  }

  /**
   * Ignore mixed "#" and "//" comments
   *
   * @return void
   */
  [@test]
  public void should_ignore_mixed_perl_and_slash_slash_comments() {
    $sins= $this.getSins('<?php
      // This is line 1
      // This is line 2
      #  This is line 3
      // This is line 4
    ?>');
    $this.assertEquals(0, $sins.length);
  }
}
