/**
 * This file is part of the XP-Framework
 *
 * Aftermath
 * Copyright (c) 2011, XP-Framework Team
 */
package unittest.net.xp_forge.aftermath.truth.php.naming;

import unittest.net.xp_forge.aftermath.truth.php.PhpTruthTest;

/**
 * Testcase
 *
 * @see xp://net.xp_forge.aftermath.truth.php.naming.ClassNameInCamelCasePhpTruth
 */
[@truth(class= 'net.xp_forge.aftermath.truth.php.naming.ClassNameInCamelCasePhpTruth')]
public class ClassNameInCamelCasePhpTruthTest extends PhpTruthTest {

  /**
   * Catch bad class names
   *
   * @return void
   */
  [@test]
  public void should_catch_bad_class_names() {
    $sins= $this.getSins('<?php
      public class badName {       // wrong
      }
      public class Bad_Again {     // wrong
      }
      public class CorrectName {   // correct
      }
      public class Correct {       // correct
      }
      abstract class still_bad {   // wrong
      }
    ?>');
    $this.assertEquals(3, $sins.length);
  }

  /**
   * Catch bad interface names
   *
   * @return void
   */
  [@test]
  public void should_catch_bad_interface_names() {
    $sins= $this.getSins('<?php
      public interface badName {       // wrong
      }
      public interface Bad_Again {     // wrong
      }
      public interface CorrectName {   // correct
      }
      public interface Correct {       // correct
      }
      interface still_bad {            // wrong
      }
    ?>');
    $this.assertEquals(3, $sins.length);
  }

  /**
   * Ignore class dot-names
   *
   * @return void
   */
  [@test]
  public void should_ignore_class_dot_names() {
    $sins= $this.getSins('<?php
      public class i·am·a·DummyTestClass {   // correct
      }
    ?>');
    $this.assertEquals(0, $sins.length);
  }

  /**
   * Ignore interface dot-names
   *
   * @return void
   */
  [@test]
  public void should_ignore_interface_dot_names() {
    $sins= $this.getSins('<?php
      public interface i·am·a·DummyTestInterface {   // correct
      }
    ?>');
    $this.assertEquals(0, $sins.length);
  }
}
