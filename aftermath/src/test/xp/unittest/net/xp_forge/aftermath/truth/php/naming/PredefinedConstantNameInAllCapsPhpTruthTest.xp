/**
 * This file is part of the XP-Framework
 *
 * Aftermath
 * Copyright (c) 2011, XP-Framework Team
 */
package unittest.net.xp_forge.aftermath.truth.php.naming;

import unittest.net.xp_forge.aftermath.truth.php.PhpTruthTest;

/**
 * Testcase
 *
 * @see xp://net.xp_forge.aftermath.truth.php.naming.PredefinedConstantNameInAllCapsPhpTruth
 */
[@truth(class= 'net.xp_forge.aftermath.truth.php.naming.PredefinedConstantNameInAllCapsPhpTruth')]
public class PredefinedConstantNameInAllCapsPhpTruthTest extends PhpTruthTest {

  /**
   * Catch TRUE not in ALL_CAPS
   *
   * @return void
   */
  [@test]
  public void should_catch_true_not_in_all_caps() {
    $sins= $this.getSins('<?php
      if (true) {    // wrong
        $a= True;    // wrong
      }
    ?>');
    $this.assertEquals(2, $sins.length);
  }

  /**
   * Catch ignore TRUE in ALL_CAPS
   *
   * @return void
   */
  [@test]
  public void should_ignore_true_in_all_caps() {
    $sins= $this.getSins('<?php
      if (TRUE) {    // correct
        $a= TRUE;    // correct
      }
    ?>');
    $this.assertEquals(0, $sins.length);
  }

  /**
   * Catch FALSE not in ALL_CAPS
   *
   * @return void
   */
  [@test]
  public void should_catch_false_not_in_all_caps() {
    $sins= $this.getSins('<?php
      if (false) {    // wrong
        $a= False;    // wrong
      }
    ?>');
    $this.assertEquals(2, $sins.length);
  }

  /**
   * Catch ignore FALSE in ALL_CAPS
   *
   * @return void
   */
  [@test]
  public void should_ignore_false_in_all_caps() {
    $sins= $this.getSins('<?php
      if (FALSE) {    // correct
        $a= FALSE;    // correct
      }
    ?>');
    $this.assertEquals(0, $sins.length);
  }

  /**
   * Catch NULL not in ALL_CAPS
   *
   * @return void
   */
  [@test]
  public void should_catch_null_not_in_all_caps() {
    $sins= $this.getSins('<?php
      if (null !== $a) {    // wrong
        $a= Null;           // wrong
      }
    ?>');
    $this.assertEquals(2, $sins.length);
  }

  /**
   * Catch ignore NULL in ALL_CAPS
   *
   * @return void
   */
  [@test]
  public void should_ignore_null_in_all_caps() {
    $sins= $this.getSins('<?php
      if (NULL === $a) {    // correct
        $b= NULL;           // correct
      }
    ?>');
    $this.assertEquals(0, $sins.length);
  }

  /**
   * Ignore function define
   *
   * @return void
   */
  [@test]
  public void should_ignore_function_define() {
    $sins= $this.getSins('<?php
      public function true() {
      }
      public function false() {
      }
      public function null() {
      }
    ?>');
    $this.assertEquals(0, $sins.length);
  }

  /**
   * Ignore static function call
   *
   * @return void
   */
  [@test]
  public void should_ignore_static_function_call() {
    $sins= $this.getSins('<?php
      $true  = xp::true();
      $false = xp::false();
      $null  = xp::null();
    ?>');
    $this.assertEquals(0, $sins.length);
  }

  /**
   * Ignore function call
   *
   * @return void
   */
  [@test]
  public void should_ignore_function_call() {
    $sins= $this.getSins('<?php
      $true  = $xp->true();
      $false = $xp->false();
      $null  = $xp->null();
    ?>');
    $this.assertEquals(0, $sins.length);
  }
}
