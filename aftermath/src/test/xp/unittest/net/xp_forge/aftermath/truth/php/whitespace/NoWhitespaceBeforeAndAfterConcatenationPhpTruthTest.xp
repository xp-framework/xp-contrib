/**
 * This file is part of the XP-Framework
 *
 * Aftermath
 * Copyright (c) 2011, XP-Framework Team
 */
package unittest.net.xp_forge.aftermath.truth.php.whitespace;

import unittest.net.xp_forge.aftermath.truth.php.PhpTruthTest;

/**
 * Testcase
 *
 * @see xp://net.xp_forge.aftermath.truth.php.whitespace.NoWhitespaceBeforeAndAfterConcatenationPhpTruth
 */
[@truth(class= 'net.xp_forge.aftermath.truth.php.whitespace.NoWhitespaceBeforeAndAfterConcatenationPhpTruth')]
public class NoWhitespaceBeforeAndAfterConcatenationPhpTruthTest extends PhpTruthTest {

  /**
   * Catch invalid WHITESPACE usage
   *
   * @return void
   */
  [@test]
  public void should_catch_invalid_whitespace() {
    $sins= $this.getSins('<?php
      $a= "prefix-" .$b. "-suffix";  // 2 x wrong
      $c= $a.	$b;                    // Tab as whitespace = twice as bad!
    ?>');
    $this.assertEquals(3, $sins.length);
  }

  /**
   * Ignore correct usage
   *
   * @return void
   */
  [@test]
  public void should_ignore_correct_usage() {
    $sins= $this.getSins('<?php
      $a= $b."-".$c;
    ?>');
    $this.assertEquals(0, $sins.length);
  }

  /**
   * Ignore trailing NEWLINE
   *
   * @return void
   */
  [@test]
  public void should_ignore_trailing_newline() {
    $sins= $this.getSins('<?php
      $a= "line one".
        "line two".
        "line three";
    ?>');
    $this.assertEquals(0, $sins.length);
  }

  /**
   * Ignore trailing WHITESPACE
   *
   * @return void
   */
  [@test]
  public void should_ignore_trailing_whitespace() {
    $sins= $this.getSins('<?php
      $a= "line one".' ~ '    ' ~ '
        "line two".
        "line three";
    ?>');
    $this.assertEquals(0, $sins.length);
  }

  /**
   * Ignore trailing comments
   *
   * @return void
   */
  [@test]
  public void should_ignore_trailing_comments() {
    $sins= $this.getSins('<?php
      $a= "line one".    // ignore me
        "line two".      // and me
        "line three";
    ?>');
    $this.assertEquals(0, $sins.length);
  }
}
