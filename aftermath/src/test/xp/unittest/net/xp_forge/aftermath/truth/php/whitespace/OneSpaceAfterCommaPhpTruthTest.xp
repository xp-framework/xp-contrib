/**
 * This file is part of the XP-Framework
 *
 * Aftermath
 * Copyright (c) 2011, XP-Framework Team
 */
package unittest.net.xp_forge.aftermath.truth.php.whitespace;

import unittest.net.xp_forge.aftermath.truth.php.PhpTruthTest;

/**
 * Testcase
 *
 * @see xp://net.xp_forge.aftermath.truth.php.whitespace.OneSpaceAfterCommaPhpTruth
 */
[@truth(class= 'net.xp_forge.aftermath.truth.php.whitespace.OneSpaceAfterCommaPhpTruth')]
public class OneSpaceAfterCommaPhpTruthTest extends PhpTruthTest {

  /**
   * Catch missing space
   *
   * @return void
   */
  [@test]
  public void should_catch_missing_space() {
    $sins= $this.getSins('<?php
      function operation($a,$b) {   // <-- wrong
        return $a + $b;
      }
      doSomething($a,$b);           // <-- wrong
    ?>');
    $this.assertEquals(2, $sins.length);
  }

  /**
   * Ignore trailing NEWLINEs
   *
   * @return void
   */
  [@test]
  public void should_ignore_trailing_newlines() {
    $sins= $this.getSins('<?php
      $a= array(
        0 => "null",
        1 => "eins",
        3 => "zwei"
      );
    ?>');
    $this.assertEquals(0, $sins.length);
  }

  /**
   * Ignore trailing comments
   *
   * @return void
   */
  [@test]
  public void should_ignore_trailing_comments() {
    $sins= $this.getSins('<?php
      $a= array(
        0 => "null",   // one
        1 => "eins",   // two
        3 => "zwei"    // three
      );
    ?>');
    $this.assertEquals(0, $sins.length);
  }

  /**
   * Ignore trailing spaces
   *
   * @return void
   */
  [@test]
  public void should_ignore_trailing_spaces() {
    $sins= $this.getSins('<?php
      $a= array(
        0 => "null",
        1 => "eins",
        3 => "zwei"
      );
    ?>');
    $this.assertEquals(0, $sins.length);
  }

  /**
   * Ignore aligned statements
   *
   * @return void
   */
  [@test]
  public void should_ignore_aliged_statements() {
    $sins= $this.getSins('<?php
      define("CHART_HORIZONTAL",  0x0000);
      define("CHART_VERTICAL",    0x0001);
    ?>');
    $this.assertEquals(0, $sins.length);
  }

  /**
   * Ignore aligned commas
   *
   * @return void
   */
  [@test]
  public void should_ignore_aliged_commas() {
    $sins= $this.getSins('<?php
      protected static $yyLhs= array(
         0,     0,     0,     0,     1,     1,     5,     5,     6,     7,
         7,     2,     2,     9,     9,     3,     3,     8,     8,    10,
        10,    10,    10,    10,    10,    10,    10,    10,    10,     4,
      }
    ?>');
    $this.assertEquals(0, $sins.length);
  }
}
